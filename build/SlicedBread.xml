<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="all" name="Build and package SlicedBread">

    <target name="buildNo" unless="BUILDNO">
    
        <property name="BUILDNO" value="${build.number}" />
        <echo>Build number: ${BUILDNO}</echo>
        
        <tstamp>
            <format property="BE.HERE.NOW" pattern="yyyy-MM-dd HH:mm" />
        </tstamp>
        
    </target>



    <target name="init" depends="buildNo">
    
        <property environment="env"/>
        <property name="customProps"  value="build-${env.USERDOMAIN}.properties" />  
    
        <property file="${customProps}"/>
        <property file="build.properties"/>                
        

        <echo>
Custom properties found in: ${customProps}    
Build number: ${BUILDNO} - ${BE.HERE.NOW}
.            
Properties for building SlicedBread:
========================================
version         : ${version}
rpmversion      : ${rpmversion}
.
srcClasses      : ${srcClasses}
srcTests        : ${srcTests}
jarComuni       : ${jarComuni}
.
buildDir        : ${buildDir}
compileDir      : ${compileDir}
testsDir        : ${testsDir}
.
destDir         : ${destDir}
webDocs         : ${webDocs}
        </echo>
        
    </target>



    <target name="setCompilePath" depends="init">
                
        <path id="compilePath">
           <pathelement location="${jarComuni}/slf4j-api-1.6.3.jar"/>
           <pathelement location="${jarComuni}/slf4j-simple-1.6.3.jar"/>
           <pathelement location="${jarComuni}/junit-4.9b2.jar"/>
        </path>
        <!-- Check classes -->
        <!--
        <available
            classname="a.b.c.d"
            property="error">
                <classpath refid="compilePath" />
        </available>
        <fail unless="error" message="Missing JAR" />
        -->
    </target>



<!--  Prepara le directory per la compilazione -->
   
    <target name="prepareCompileDirs" depends="init">
        <delete dir="${buildDir}"/>
        <delete dir="${compileDir}"/>

        <mkdir  dir="${buildDir}"/>
        <mkdir  dir="${compileDir}"/>
    </target>

    <target name="setDefine">
        <replace 
           file="${compileDir}/ch/loway/oss/slicedbread/CS.java"
           token="${k}"
           value="${k} = ${v}; // "
           />             
        <echo message="setDefine: ${k}=${v}"/>
    </target>
    
    <target name="setDefineS">
        <antcall target="setDefine">
            <param name="k" value="${k}" />
            <param name="v" value="&#34;${v}&#34;" />        
        </antcall>
    </target>


    <target depends="prepareCompileDirs,setCompilePath" name="compile">
        <!--
          Copio i sorgenti (e la roba di test, etc) nella dir
          di compilazione,cosi' pèoi posso far girare unit test
          nella stessa directory
        -->
        
        <!-- copia tutti i files sotto una dir di build -->
        <copy todir="${compileDir}">
            <fileset dir="${srcClasses}"></fileset>            
        </copy>

        <!-- IMPOSTA LE VARIABILI DI COMPILAZIONE -->
        <antcall target="setDefineS">
            <param name="k" value="VERSION" />
            <param name="v" value="${version}" />
        </antcall>

        <antcall target="setDefineS">
            <param name="k" value="BUILD_N" />
            <param name="v" value="${BUILDNO} ${BE.HERE.NOW}" />
        </antcall>

        <antcall target="setDefine">
            <param name="k" value="DEVELOPEMENT" />
            <param name="v" value="false" />
        </antcall>


        <!-- effettua la compilazione -->        
        <javac
            compiler="modern"
	    encoding="ISO8859_1"
            debug="on" debuglevel="all"
            source="1.5" target="1.5"
            deprecation="true" 
            destdir="${compileDir}" 
            srcdir="${compileDir}"
            includeantruntime="false">
        
            <classpath refid="compilePath" />
        </javac> 
    </target>


    <target depends="prepareCompileDirs,setCompilePath" name="compileForTests">
        <!--
          Copio i sorgenti (e la roba di test, etc) nella dir
          di compilazione,cosi' pèoi posso far girare unit test
          nella stessa directory
        -->

        <!-- copia tutti i files sotto una dir di build -->
        <copy todir="${testsDir}">
            <fileset dir="${srcClasses}"></fileset>
            <fileset dir="${srcTests}"></fileset>
        </copy>

        <!-- IMPOSTA LE VARIABILI DI COMPILAZIONE -->
<!--
        <antcall target="setDefineS">
            <param name="k" value="VERSION" />
            <param name="v" value="${version}" />
        </antcall>

        <antcall target="setDefineS">
            <param name="k" value="BUILD_N" />
            <param name="v" value="${BUILDNO} ${BE.HERE.NOW}" />
        </antcall>

        <antcall target="setDefine">
            <param name="k" value="DEVELOPEMENT" />
            <param name="v" value="false" />
        </antcall>
-->

        <!-- effettua la compilazione -->
        <javac
            compiler="modern"
	    encoding="ISO8859_1"
            debug="on" debuglevel="all"
            source="1.5" target="1.5"
            deprecation="true"
            destdir="${testsDir}"
            srcdir="${testsDir}"
            includeantruntime="false">

            <classpath refid="compilePath" />
        </javac>
    </target>



    <target depends="compile" name="buildJar">
        <!-- To make a standalone app: -->
        <!-- 1. Create a myapp.mf manifest somewhere. -->
        <!-- 2. Put in it two lines: -->
        <!-- Manifest-Version: 1.0 -->
        <!-- Main-Class: com.foo.Main -->
        <!-- 3. Pass to <jar>: manifest="myapp.mf" -->
        <jar basedir="${compileDir}" 
             compress="true" 
             jarfile="${destDir}\SlicedBread-${version}.jar" >
            <exclude name="**/*.nbattrs"/>
            <exclude name="**/*.java"/>
            <exclude name="**/*.form"/>
            <exclude name="myapp.mf"/>
            <exclude name="*.jar"/>
            <exclude name="apidoc/**"/>
                        
        </jar>
    </target>


    <target description="Build everything." name="all" depends="buildJar,javadoc,runJUnit">

        <echo message="Application built. SlicedBread ${version}."/>
    </target>

    <target description="Javadoc for my API." name="javadoc" depends="compile">
        
        <javadoc packagenames="ch.loway.oss.slicedbread.*"
            sourcepath="${compileDir}"
            destdir="${webDocs}">

            <packageset dir="${compileDir}">
                <include name="**"/>
            </packageset>
        </javadoc>
    </target>

    <target depends="init" description="Clean all build products." name="clean">
        <delete>
            <fileset dir=".">
                <include name="**/*.class"/>
            </fileset>
        </delete>
        <delete file="${destdir}\QueueMetrics-${version}.jar"/>
        <delete dir="apidoc"/>
        <delete dir="${webapps}/${qmFolder}/doxygen"/>
        <delete dir="${buildDir}\queuemetrics"/>        
    </target>


    <target name="runJUnit" depends="compileForTests">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <pathelement path="${java.class.path}"/>
                <pathelement path="${testsDir}\"/>

            </classpath>
            <classpath refid="compilePath" />

            <formatter type="xml" usefile="true"/>

            <test name="ch.loway.oss.slicedbread.FirstTest" outfile="junit_results" />
        </junit>
    </target>



</project>

<!--
//
//
-->
